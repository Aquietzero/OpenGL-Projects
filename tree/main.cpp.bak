/*
 * =====================================================================================
 *
 *       Filename:  main.cpp
 *
 *    Description:  A demo of 3D tree generated by random fractal algorithm.
 *
 *        Version:  1.0
 *        Created:  05/24/2012 08:15:26 PM
 *       Revision:  none
 *       Compiler:  gcc
 *
 *         Author:  YOUR NAME (), 
 *        Company:  
 *
 * =====================================================================================
 */

#include "tree.h"

FractalTree* tree = new FractalTree();
GLfloat alpha;
GLfloat beta;
GLfloat radius;

void RenderScene() {

    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

    glColor3ub(255, 255, 255);
    glLoadIdentity();
    gluLookAt(radius*cos(RADIAN(alpha))*cos(RADIAN(beta)),
              radius*sin(RADIAN(alpha)),
              radius*cos(RADIAN(alpha))*sin(RADIAN(beta)),
              0, 0, 0, 
              0, 1, 0);

    tree->render();

    glutSwapBuffers();

}

void ChangeSize(GLsizei w, GLsizei h) {

    if (h == 0)
        h = 1;

    glViewport(0, 0, w, h);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();

    if (w <= h)
        glFrustum(-1.0, 1.0, -1.0*h/w, 1.0*h/w, 1.5, 20);
    else
        glFrustum(-1.0*w/h, 1.0*w/h, -1.0, 1.0, 1.5, 20);

    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();

}

void SetupRC() {

    srand(time(NULL));
    tree->generate(3, 0.5, 0, 0, 0, 0);
    alpha = 60;
    beta = 0;
    radius = 17;

    glClearColor(0, 0, 0, 0);
    glEnable(GL_DEPTH_TEST);
    glEnable(GL_CULL_FACE);
    glEnable(GL_MULTISAMPLE);

    GLfloat ambientLight[] = {0.2, 0.2, 0.2, 1.0};
    GLfloat diffuseLight[] = {0.5, 0.5, 0.5, 1.0};
    GLfloat lightSource[]  = {2.0, 2.0, 2.0, 1.0};

    glEnable(GL_LIGHTING);
    glLightfv(GL_LIGHT0, GL_AMBIENT, ambientLight);
    glLightfv(GL_LIGHT0, GL_DIFFUSE, diffuseLight);

    glEnable(GL_LIGHT0);
    glLightfv(GL_LIGHT0, GL_POSITION, lightSource);

    glEnable(GL_COLOR_MATERIAL);
    glColorMaterial(GL_FRONT, GL_AMBIENT_AND_DIFFUSE);

}

void SpecialKeys(int w, int x, int y) {

    switch (w) {
        case GLUT_KEY_LEFT:
            beta += 1.0;
            break;
        case GLUT_KEY_RIGHT:
            beta -= 1.0;
            break;
        case GLUT_KEY_UP:
            alpha += 1.0;
            break;
        case GLUT_KEY_DOWN:
            alpha -= 1.0;
            break;
    }

    glutPostRedisplay();

}

int main(int argc, char **argv) {

    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_RGBA | GLUT_DOUBLE | GLUT_DEPTH | GLUT_MULTISAMPLE);

    glutInitWindowSize(800, 600);
    glutInitWindowPosition(100, 100);
    glutCreateWindow("3D Fractal Tree");

    SetupRC();
    glutReshapeFunc(ChangeSize);
    glutDisplayFunc(RenderScene);
    glutSpecialFunc(SpecialKeys);

    glutMainLoop();

    return 0;
}
